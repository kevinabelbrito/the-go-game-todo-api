openapi: 3.0.0
info:
  title: The Go Game Todo Test API
  description: API for managing tasks
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local server
  - url: https://the-go-game-todo-api.onrender.com/api
    description: Remote server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email
    Task:
      type: object
      properties:
        id:
          type: string
          description: Task ID
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        createdAt:
          type: string
          format: date-time
          description: Task creation date
        status:
          type: string
          enum: [pending, completed]
          description: Task status
        userId:
          type: string
          description: User ID associated with the task
    TokenResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Indicates if the token is valid
        message:
          type: string
          description: Message regarding token validation
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
    ValidationResponse:
      type: object
      properties:
        type:
          type: string
          description: Entity type
        msg:
          type: string
          description: Error message
        path:
          type: string
          description: Entity name
        location:
          type: string
          description: Location of the error (E. body, params)
        value:
          type: string
          description: Entered data
tags:
  - name: User
    description: Endpoints for managing users and tokens
  - name: Task
    description: Endpoints for managing tasks
paths:
  /users/{email}:
    get:
      tags:
        - User
      summary: Get user by email
      description: Fetches a user by their email and generates a JWT for the user.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: Email of the user to fetch
      responses:
        '200':
          description: User found and token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token for the user
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Server error
  /users:
    post:
      tags:
        - User
      summary: Add a new user
      description: Adds a new user to the database and generates a JWT for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email of the new user
      responses:
        '201':
          description: User added successfully and token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token for the user
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Server error
  /users/validate-token:
    post:
      tags:
        - User
      summary: Validate a token
      description: Validates a JWT token and checks its validity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT token to validate
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Token is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /tasks:
    get:
      tags:
        - Task
      summary: Get all tasks for the authenticated user
      security:
      - BearerAuth: []
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: UnAuthorized
        '500':
          description: Failed to fetch tasks
    post:
      tags:
        - Task
      summary: Add a new task
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
              properties:
                title:
                  type: string
                  description: Task title
                description:
                  type: string
                  description: Task description
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: UnAuthorized
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Failed to add task
  /tasks/{taskId}:
    put:
      tags:
        - Task
      summary: Update a task
      security:
      - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Updated task title
                description:
                  type: string
                  description: Updated task description
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: UnAuthorized
        '404':
          description: Task not found
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Failed to update task
    delete:
      tags:
        - Task
      summary: Delete a task
      security:
      - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to delete
      responses:
        '204':
          description: Task deleted successfully
        '401':
          description: UnAuthorized
        '404':
          description: Task not found
        '500':
          description: Failed to delete task
  /tasks/{taskId}/status:
    patch:
      tags:
        - Task
      summary: Toggle the status of a task
      description: Updates the status of a task between `pending` and `completed` for the authenticated user.
      security:
      - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the task to toggle the status.
      responses:
        '200':
          description: Task status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the task.
                  status:
                    type: string
                    enum: [pending, completed]
                    description: The new status of the task.
        '401':
          description: UnAuthorized
        '404':
          description: Task not found or does not belong to the authenticated user.
        '500':
          description: Failed to update task status.



